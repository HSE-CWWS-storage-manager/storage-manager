@page "/auth/login"
@using common.Dtos.Request
@using frontend.Services
@using Microsoft.AspNetCore.Authorization
@inject AuthService AuthService
@inject NavigationManager NavManager
@attribute [Authorize]
@* @rendermode InteractiveAuto *@
@rendermode InteractiveServer

<PageTitle>Вход</PageTitle>

<MudGrid Justify="Justify.Center">
    <PageHeader Backlink="/auth" HelpFilename="vkhod_v_sistemu.html">Вход</PageHeader>
    <MudItem xs="12">
        @* <MudForm action="/home"> *@
        @*     <MudTextField *@
        @*         T="string" *@
        @*         @bind-Text="Mail" *@
        @*         Label="Почта" *@
        @*         InputType="InputType.Email" *@
        @*         Variant="Variant.Outlined"></MudTextField> *@
        @*     <MudTextField *@
        @*         T="string" *@
        @*         @bind-Text="Password" *@
        @*         Label="Пароль" *@
        @*         InputType="InputType.Password" *@
        @*         Variant="Variant.Outlined"></MudTextField> *@
        @*     <MudSpacer /> *@
        @*     <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Войти</MudButton> *@
        @* </MudForm> *@
        @if (ErrorMessage != null)
        {
            <MudText>
                @ErrorMessage
            </MudText>
        }
        <EditForm Model="typeof(UserAuthenticationRequest)" OnValidSubmit="@HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />
            
            <InputText @bind-Value="_request.Email" type="email" placeholder="Логин" />
            <InputText @bind-Value="_request.Password" type="password" placeholder="Пароль" />
            
            <button type="submit">Войти</button>
        </EditForm>
    </MudItem>
</MudGrid>

@code
{
    private UserAuthenticationRequest _request = new();
    private string? ErrorMessage;
    
    private async Task HandleLogin()
    {
        var result = await AuthService.LoginAsync(_request);
        
        if (result.IsSuccess)
        {
            await AuthService.RefreshLoginStateAsync(result.Value);
            NavManager.NavigateTo("/home");
            Console.WriteLine(result.Value.AccessToken);
        }
        else
        {
            ErrorMessage = result.Error;
        }
    }
}
